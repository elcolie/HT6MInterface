#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun May 20 14:33:01 2018

@author: vitreloy
"""
import matplotlib.pyplot as plt
import math
import matplotlib.ticker as mticker

import numpy as np
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
from mpl_toolkits.mplot3d import Axes3D

def Read0DDataPlot1DGraph(filename1, XLabel, YLabel, Title, FigureName, Option):
    # This function loads 0D data from TASK code and plot it with 1D simple graph
    # Last update: 20 May 2018
    # 
    # Input of this function:
    #
    # filename1 = 'data_GT0.txt'    ; name of the file that was generated by TASK
    # XLabel = 'Time [s]'           ; x-axis label
    # YLabel = 'NE [10**20 m**-3]'  ; y-axis label
    # Title  = 'Electron density'   ; title of the graph
    # FigureName = 'Plot1'          ; name of the figure exported (without extension)
    # Option = 0                    ; regular run (no graph exported)
    # Option = 1                    ; regular run and save graph with name FigureName (png format)
    
    # OPEN FILE
    file1 = open(filename1,"r")

    # IGNORE THE FIRST TWO LINES (standard TASK output format)
    temp1 = file1.readline() # line 1
    temp1 = file1.readline() # line 2
    
    temp1 = file1.readline() # line 3
    NData = int(temp1[5:])   # Total number of data points
    
    XList = []
    YList = []
    
    Linei = 1
    while Linei<=NData:
        temp1 = file1.readline()
        temp2 = temp1.split(" ")
        i = -1
        for itemi in temp2:
            if (len(itemi)>2):
                i = i*(-1)
                if (i>0):
                    xi = float(itemi)
                    XList.append(xi)
                else:
                    yi = float(itemi)
                    YList.append(yi)                    
        Linei = Linei + 1
    
    # GRAPH PLOTING
    plt.rc('font', family='serif', serif='Times')
    
    width  =  6.5
    height = 4.5
    
    fig = plt.figure(figsize=(width, height))
    
    plt.plot(XList, YList, 'k-', linewidth=2)
    plt.xlabel(XLabel)
    plt.ylabel(YLabel)
    plt.grid()
    plt.xlim((math.floor(min(XList)), max(XList)))
    plt.title(Title)
    
    if Option==1:
        fig.set_size_inches(width, height)
        fig.savefig(FigureName + '.png')
        
def ConvertTASK2DDataToNew2DFormat(filename1, filename2):
    # This functions reads 2D data from TASK/TR code and convert it into a new format
    # which is easier for reading by java script
    # Line 1 to 5 are header part.
    # Line 6 and the rest are snapshots of the radial profiles of the plasma.
    
    # Input of this function
    # filename1 = "data_RT5.txt"       ; input file which the 2D output from TASK/TR
    # filename2 = "data2D_RT5.txt"     ; output file which has a new simple format
    
    file1 = open(filename1,"r")
    file2 = open(filename2,"w")
    
    temp1 = file1.readline()
    file2.write(temp1)
    var1 = temp1[5:7]
    
    temp1 = file1.readline()
    temp1 = file1.readline()
    NRMax = int(temp1[5:13])
    NTMax = int(temp1[13:21])
    file2.write("NRMax = {0:d}\n".format(NRMax))
    file2.write("NTMax = {0:d}\n".format(NTMax))
    
    # GET RADIAL COORDINATES
    linei = 1
    elementn = 0
    RList = []
    RLineTotal = math.ceil(NRMax/5.0)
    while linei<=RLineTotal:
        temp1 = file1.readline()
        temp1 = temp1[:-1]
        temp2 = temp1.split(" ")    
        for i in temp2:
            if(len(i)>=2):
                elementi=float(i)
                elementn = elementn + 1
                RList.append(elementi)
        linei = linei + 1
    # SAVE RADIAL COORDINATES TO FILE2    
    for ri in RList:
        file2.write(" {0:14.7e}".format(ri))
    file2.write("\n")
    
    # GET TIME LIST
    linei = 1
    elementn = 0
    TList = []
    TLineTotal = math.ceil(NTMax/5.0)
    while linei<=TLineTotal:
        temp1 = file1.readline()
        temp1 = temp1[:-1]
        temp2 = temp1.split(" ")    
        for i in temp2:
            if(len(i)>=2):
                elementi=float(i)
                elementn = elementn + 1
                TList.append(elementi)
        linei = linei + 1
    # SAVE TIME LIST TO FILE
    for ti in TList:
        file2.write(" {0:14.7e}".format(ti))
    file2.write("\n")
    
    # SAVE RADIAL PROFILE AT TIME-I IN ROW-I
    TimeSectioni = 1
    while TimeSectioni<=NTMax:
        linei = 1
        while linei <= RLineTotal:
            temp1 = file1.readline()
            temp1 = temp1[:-1]
            temp2 = temp1.split(" ")
            for i in temp2:
                if(len(i)>=2):
                    elementi = float(i)
                    file2.write(" {0:14.7e}".format(elementi))        
            linei = linei + 1
        file2.write("\n")
        TimeSectioni = TimeSectioni + 1
    
    file2.close()
    
def ReadNew2DDataAndPlotSurfaceGraph(filenameIN, FigureFilename, xlabel, ylabel, \
                                     zlabel, GraphTitle, Option):
    # This function  read the 2D output data from TASK and plot it in 3D. Note that 
    # the 2D output data from TASK has to be in the new 2D file format which
    # can be done by calling ConvertTASK2DDataToNew2DFormat(). 
    #
    # Inputs:
    # filenameIN             = path to the input file given in the new 2D file format    
    # FigureFilename         = path to a figure file (Output)
    # xlabel, ylabel, zlabel = labels on the axis
    # GraphTitle             = Title of the figure
    # Option                 = options of this function
    # Option                 == 0 Nothing
    # Option                 == 1 Writing the figure to file
    #
    
    file1 = open(filenameIN,"r")
    
    # Line 1: name of variable
    temp1 = file1.readline()
    # Line 2: NRMAX
    temp1 = file1.readline()
    NRMax = int(temp1[7:len(temp1)])
    # print(NRMax)
    # Line 3: NTMAX
    temp1 = file1.readline()
    NTMax = int(temp1[7:len(temp1)])
    # Line 4: Radial mesh points
    temp1 = file1.readline()
    temp1 = temp1[:-1]
    temp2 = temp1.split(" ")
    RList = []
    for i in temp2:
        if(len(i)>=2):
            elementi = float(i)
            RList.append(elementi)
    Rvec = np.asarray(RList)
    # Line 5: Time break points
    temp1 = file1.readline()
    temp1 = temp1[:-1]
    temp2 = temp1.split(" ")
    TList = []
    for i in temp2:
        if(len(i)>=2):
            elementi = float(i)
            TList.append(elementi)
    Tvec = np.asarray(TList)        
    # Line 6 to the end
    Z = np.zeros((NTMax, NRMax))
    jindex = 0
    for j in range(NTMax):
        temp1 = file1.readline()
        temp1 = temp1[:-1]
        temp2 = temp1.split(" ")
        iindex = 0
        for i in temp2:
            if(len(i)>=2):
                elementi = float(i)
                Z[jindex][iindex] = elementi
                iindex = iindex + 1
        jindex = jindex + 1
    
    file1.close()
    
    # Plot the surface.
    
        
    R, T = np.meshgrid(Rvec, Tvec)
    width = 5.5
    height = 4.5
    
    fig = plt.figure(figsize=(width, height))
    ax = fig.gca(projection='3d')
    surf = ax.plot_surface(R, T, Z, cmap=cm.coolwarm,
                           linewidth=0, antialiased=False)
    #fig.colorbar(surf, shrink=0.5, aspect=5)
    
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)
    ax.set_zlabel(zlabel)
    ax.text2D(0.05, 0.95, GraphTitle, transform=ax.transAxes)
    
    
    plt.show()
    if Option==1:
        fig.set_size_inches(width, height)
        fig.savefig(FigureFilename + '.png')    
        
def ReadNew2DDataAndDoLinePlot(filenameIN, FigureFilename, xlabel, ylabel, \
                               GraphTitle, NoOfTimeSlices, Option):
    #
    # This function  read the 2D output data from TASK and do line plot. Note that 
    # the 2D output data from TASK has to be in the new 2D file format which
    # can be done by calling ConvertTASK2DDataToNew2DFormat(). 
    #
    # Inputs:
    # filenameIN             = path to the input file given in the new 2D file format    
    # FigureFilename         = path to a figure file (Output)
    # xlabel, ylabel, zlabel = labels on the axis
    # GraphTitle             = Title of the figure
    # NoOfTimeSlices         = Number of snapshots that will be displayed
    # Option                 = options of this function
    # Option                 == 0 Nothing
    # Option                 == 1 Writing the figure to file
    #
    file1 = open(filenameIN,"r")
    
    # Line 1: name of variable
    temp1 = file1.readline()
    # Line 2: NRMAX
    temp1 = file1.readline()
    NRMax = int(temp1[7:len(temp1)])
    # print(NRMax)
    # Line 3: NTMAX
    temp1 = file1.readline()
    NTMax = int(temp1[7:len(temp1)])
    # Line 4: Radial mesh points
    temp1 = file1.readline()
    temp1 = temp1[:-1]
    temp2 = temp1.split(" ")
    RList = []
    for i in temp2:
        if(len(i)>=2):
            elementi = float(i)
            RList.append(elementi)
    Rvec = np.asarray(RList)
    # Line 5: Time break points
    temp1 = file1.readline()
    temp1 = temp1[:-1]
    temp2 = temp1.split(" ")
    TList = []
    for i in temp2:
        if(len(i)>=2):
            elementi = float(i)
            TList.append(elementi)
    Tvec = np.asarray(TList)        
    # Line 6 to the end
    Z = np.zeros((NTMax, NRMax))
    jindex = 0
    for j in range(NTMax):
        temp1 = file1.readline()
        temp1 = temp1[:-1]
        temp2 = temp1.split(" ")
        iindex = 0
        for i in temp2:
            if(len(i)>=2):
                elementi = float(i)
                Z[jindex][iindex] = elementi
                iindex = iindex + 1
        jindex = jindex + 1
    
    file1.close()
    
    # Line Plot    
    
    width = 6.5
    height = 4.5
    
    
    fig = plt.figure(figsize=(width, height))
    
    XList = RList
    
    for i in range(NoOfTimeSlices):
        TimeIndex = int(i*(NTMax-1)/(NoOfTimeSlices-1))
        YList = list(Z[TimeIndex,])
        LineLegend = str(TList[TimeIndex])
        if i==0:
            plt.plot(XList, YList, linewidth=2, label=LineLegend.format(i=i))
        else:
            plt.hold(True)
            plt.plot(XList, YList, linewidth=2, label=LineLegend.format(i=i))
            plt.hold(False)
        
    plt.legend(loc='best')    
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.grid()
    plt.xlim((math.floor(min(XList)), max(XList)))
    plt.title(GraphTitle)
    plt.show()
    
    if Option==1:
        fig.set_size_inches(width, height)
        fig.savefig(FigureFilename + '.png')          